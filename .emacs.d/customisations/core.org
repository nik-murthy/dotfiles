#+TITLE: Core Configurations
#+PROPERTY: header-args :tangle core.el :results silent

* Package Initialization

Start by setting up package.el and ensuring `use-package` is available.

#+BEGIN_SRC emacs-lisp
;; ***************
;;; Initialize package management
;; ***************

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)

;; Fetch the list of packages available 
(unless package-archive-contents (package-refresh-contents))

;; Install use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(setq use-package-always-ensure t)
#+END_SRC

* Core UI and UX Tweaks

** Prompt Simplification

#+begin_src emacs-lisp
;; Change all "yes or no" prompts to "y or n"
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Quiet Down Emacs

#+begin_src emacs-lisp
;; Disable the annoying bell sound
(setq ring-bell-function 'ignore)
#+end_src

** Disable Lockfiles

#+begin_src emacs-lisp
;; Prevent creation of lockfiles (~foo.txt#)
(setq create-lockfiles nil)
#+end_src

* File History and State

** Recent Files

#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-saved-items 50)
#+end_src

** Save Cursor Position

#+begin_src emacs-lisp
(save-place-mode 1)
(setq save-place-file (expand-file-name "places" user-emacs-directory))
#+end_src

* Backups and Auto-Save

#+begin_src emacs-lisp
;; Set user cache directory
(setq user-cache-directory (expand-file-name "cache/" user-emacs-directory))

;; Store backup files in a dedicated location
(setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory))))

;; Disable auto-save files
(setq auto-save-default nil)

;; Set other cache-related paths
(setq url-history-file (expand-file-name "url/history" user-cache-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))
#+end_src

** Shell config

* Open eshell other buffer

#+BEGIN_SRC emacs-lisp
(defun eshell-other-window ()
  "Open an `eshell` in a new window."
  (interactive)
  (let ((buf (eshell)))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf)))
#+END_SRC

* exec-path-from-shell

#+BEGIN_SRC emacs-lisp
;; ***************
;;; Shell integration: exec-path-from-shell
;; ***************
;; This package ensures that Emacs inherits your shell's environment variables,
;; like PATH, which is especially useful on macOS and GUI Emacs.
(use-package exec-path-from-shell
  :ensure t)
(exec-path-from-shell-initialize)
#+END_SRC
